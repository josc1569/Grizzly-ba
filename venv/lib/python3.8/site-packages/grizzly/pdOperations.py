from enum import Enum
import pandas as pd

class pandasOperation(Enum):
    abs = 1
    all = 2
    any = 3
    clip = 4
    corr = 5
    corrwith = 6
    count = 7
    cov = 8
    cummax = 9
    cummin = 10
    cumprod = 11
    cumsum = 12
    describe = 13
    diff = 14
    eval = 15
    kurt = 16
    kurtosis = 17
    mad = 18
    max = 19
    mean = 20
    median = 21
    min = 22
    mode = 23
    pct_change = 24
    prod = 25
    product = 26
    quantile = 27
    rank = 28
    round = 29
    sem = 30
    skew = 31
    sum = 32
    std = 33
    var = 34
    nunique = 35
    value_counts = 36

    def __call__(self, *args, **kwargs):
        return self

    def __abs__(self, **kwargs):
        res = self.abs()
        return res

    def __all__(self, **kwargs):
        axis = 0
        bool_only = None
        skipna = True
        level = None
        if 'axis' in kwargs.keys(): axis = kwargs['axis']
        if 'bool_only' in kwargs.keys(): bool_only = kwargs['bool_only']
        if 'skipna' in kwargs.keys(): skipna = kwargs['skipna']
        if 'level' in kwargs.keys(): level = kwargs['level']
        res = self.all(axis=axis, bool_only=bool_only, skipna=skipna, level=level)
        return res

    def __any__(self, **kwargs):
        axis = 0
        bool_only = None
        skipna = True
        level = None
        if 'axis' in kwargs.keys(): axis = kwargs['axis']
        if 'bool_only' in kwargs.keys(): bool_only = kwargs['bool_only']
        if 'skipna' in kwargs.keys(): skipna = kwargs['skipna']
        if 'level' in kwargs.keys(): level = kwargs['level']
        res = self.any(axis=axis, bool_only=bool_only, skipna=skipna, level=level)
        return res

    def __clip__(self, **kwargs):
        lower = None
        upper = None
        axis = 0
        inplace = False
        if 'lower' in kwargs.keys(): lower = kwargs['lower']
        if 'upper' in kwargs.keys(): upper = kwargs['upper']
        if 'axis' in kwargs.keys(): axis = kwargs['axis']
        if 'inplace' in kwargs.keys(): inplace = kwargs['inplace']
        res = self.clip(lower=lower, upper=upper, axis=axis, inplace=inplace)
        return res

    def __corr__(self, **kwargs):
        method = 'pearson'
        min_periods = 1
        if 'method' in kwargs.keys(): method = kwargs['method']
        if 'min_periods' in kwargs.keys(): min_periods = kwargs['min_periods']
        res = self.corr(method=method, min_periods=min_periods)
        return res
    def __corrwith__(self, **kwargs):
        axis = 0
        drop = False
        method = 'pearson'
        if 'axis' in kwargs.keys(): axis = kwargs['axis']
        if 'drop' in kwargs.keys(): drop = kwargs['drop']
        if 'method' in kwargs.keys(): method = kwargs['method']
        res = self.corrwith(other=kwargs['other'], axis=axis, drop=drop, method=method)
        return res

    def __count__(self, **kwargs):
        axis = 0
        level = None
        numeric_only = False
        if 'axis' in kwargs.keys(): axis = kwargs['axis']
        if 'level' in kwargs.keys(): level = kwargs['level']
        if 'numeric_only' in kwargs.keys(): numeric_only = kwargs['numeric_only']
        res = self.count(axis=axis, level=level, numeric_only=numeric_only)
        return res

    def __cov__(self, **kwargs):
        min_periods = None
        ddof = 1
        if 'min_periods' in kwargs.keys(): min_periods = kwargs['min_periods']
        if 'ddof' in kwargs.keys(): ddof = kwargs['ddof']
        res = self.cov(min_periods=min_periods, ddof=ddof)
        return res

    def __cummax__(self, **kwargs):
        axis = 0
        skipna = True
        if 'axis' in kwargs.keys(): axis = kwargs['axis']
        if 'skipna' in kwargs.keys(): skipna = kwargs['skipna']
        res = self.cummax(axis=axis, skipna=skipna)
        return res

    def __cummin__(self, **kwargs):
        axis = 0
        skipna = True
        if 'axis' in kwargs.keys(): axis = kwargs['axis']
        if 'skipna' in kwargs.keys(): skipna = kwargs['skipna']
        res = self.cummin(axis=axis, skipna=skipna)
        return res

    def __cumprod__(self, **kwargs):
        axis = None
        skipna = False
        if 'axis' in kwargs.keys(): axis = kwargs['axis']
        if 'skipna' in kwargs.keys(): skipna = kwargs['skipna']
        res = self.cumprod(axis=axis, skipna=skipna)
        return res

    def __cumsum__(self, **kwargs):
        axis = None
        skipna = True
        if 'axis' in kwargs.keys(): axis = kwargs['axis']
        if 'skipna' in kwargs.keys(): skipna = kwargs['skipna']
        res = self.cumsum(axis=axis, skipna=skipna)
        return res

    def __describe__(self, **kwargs):
        percentiles = None
        include = None
        exclude = None
        datetime_is_numeric = False
        if 'percentiles' in kwargs.keys(): percentiles = kwargs['percentiles']
        if 'include' in kwargs.keys(): include = kwargs['include']
        if 'exclude' in kwargs.keys(): exclude = kwargs['exclude']
        if 'datetime_is_numeric' in kwargs.keys(): datetime_is_numeric = kwargs['datetime_is_numeric']
        res = self.describe(percentiles=percentiles, include=include, exclude=exclude, datetime_is_numeric=datetime_is_numeric)
        return res

    def __diff__(self, **kwargs):
        periods = 1
        axis = 0
        if 'axis' in kwargs.keys(): axis = kwargs['axis']
        if 'periods' in kwargs.keys(): periods = kwargs['periods']
        res = self.diff(axis=axis, periods=periods)
        return res

    def __eval__(self, **kwargs):
        inplace = False
        if 'inplace' in kwargs.keys(): inplace = kwargs['inplace']
        res = self.eval(expr=kwargs['expr'], inplace=inplace)
        return res

    def __kurt__(self, **kwargs):
        skipna = True
        level = None
        numeric_only = None
        if 'skipna' in kwargs.keys(): skipna = kwargs['skipna']
        if 'level' in kwargs.keys(): level = kwargs['level']
        if 'numeric_only' in kwargs.keys(): numeric_only = kwargs['numeric_only']
        res = self.kurt(axis=kwargs['axis'], skipna=skipna, level=level, numeric_only=numeric_only)
        return res

    def __kurtosis__(self, **kwargs):
        skipna = True
        level = None
        numeric_only = None
        if 'skipna' in kwargs.keys(): skipna = kwargs['skipna']
        if 'level' in kwargs.keys(): level = kwargs['level']
        if 'numeric_only' in kwargs.keys(): numeric_only = kwargs['numeric_only']
        res = self.kurtosis(axis=kwargs['axis'], skipna=skipna, level=level, numeric_only=numeric_only)
        return res

    def __mad__(self, **kwargs):
        axis = None
        skipna = True
        level = None
        if 'axis' in kwargs.keys(): axis = kwargs['axis']
        if 'skipna' in kwargs.keys(): skipna = kwargs['skipna']
        if 'level' in kwargs.keys(): level = kwargs['level']
        res = self.mad(axis=axis, skipna=skipna, level=level)
        return res

    def __max__(self, **kwargs):
        axis = NoDefault.no_default
        skipna = True
        level = None
        numeric_only = None
        if 'axis' in kwargs.keys(): axis = kwargs['axis']
        if 'skipna' in kwargs.keys(): skipna = kwargs['skipna']
        if 'level' in kwargs.keys(): level = kwargs['level']
        if 'numeric_only' in kwargs.keys(): numeric_only = kwargs['numeric_only']
        res = self.max(axis=axis, skipna=skipna, level=level, numeric_only=numeric_only)
        return res

    def __mean__(self, **kwargs):
        axis = NoDefault.no_default
        skipna = True
        level = None
        numeric_only = None
        if 'axis' in kwargs.keys(): axis = kwargs['axis']
        if 'skipna' in kwargs.keys(): skipna = kwargs['skipna']
        if 'level' in kwargs.keys(): level = kwargs['level']
        if 'numeric_only' in kwargs.keys(): numeric_only = kwargs['numeric_only']
        res = self.mean(axis=axis, skipna=skipna, level=level, numeric_only=numeric_only)
        return res

    def __median__(self, **kwargs):
        axis = NoDefault.no_default
        skipna = True
        level = None
        numeric_only = None
        if 'axis' in kwargs.keys(): axis = kwargs['axis']
        if 'skipna' in kwargs.keys(): skipna = kwargs['skipna']
        if 'level' in kwargs.keys(): level = kwargs['level']
        if 'numeric_only' in kwargs.keys(): numeric_only = kwargs['numeric_only']
        res = self.median(axis=axis, skipna=skipna, level=level, numeric_only=numeric_only)
        return res

    def __min__(self, **kwargs):
        axis = NoDefault.no_default
        skipna = True
        level = None
        numeric_only = None
        if 'axis' in kwargs.keys(): axis = kwargs['axis']
        if 'skipna' in kwargs.keys(): skipna = kwargs['skipna']
        if 'level' in kwargs.keys(): level = kwargs['level']
        if 'numeric_only' in kwargs.keys(): numeric_only = kwargs['numeric_only']
        res = self.min(axis=axis, skipna=skipna, level=level, numeric_only=numeric_only)
        return res

    def __mode__(self, **kwargs):
        axis = 0
        numeric_only = False
        dropna = True
        if 'axis' in kwargs.keys(): axis = kwargs['axis']
        if 'numeric_only' in kwargs.keys(): numeric_only = kwargs['numeric_only']
        if 'dropna' in kwargs.keys(): dropna = kwargs['dropna']
        res = self.mode(axis=axis, numeric_only=numeric_only, dropna=dropna)
        return res

    def __pct_change__(self, **kwargs):
        periods = 1
        fill_method = 'pad'
        limit = None
        freq = None
        if 'periods' in kwargs.keys(): periods = kwargs['periods']
        if 'fill_method' in kwargs.keys(): fill_method = kwargs['fill_method']
        if 'limit' in kwargs.keys(): limit = kwargs['limit']
        if 'freq' in kwargs.keys(): freq = kwargs['freq']
        res = self.pct_change(periods=periods, fill_method=fill_method, limit=limit, freq=freq)
        return res

    def __prod__(self, **kwargs):
        axis = None
        skipna = True
        level = None
        numeric_only = None
        min_count = 0
        if 'axis' in kwargs.keys(): axis = kwargs['axis']
        if 'skipna' in kwargs.keys(): skipna = kwargs['skipna']
        if 'level' in kwargs.keys(): level = kwargs['level']
        if 'numeric_only' in kwargs.keys(): numeric_only = kwargs['numeric_only']
        if 'min_count' in kwargs.keys(): min_count = kwargs['min_count']
        res = self.prod(axis=axis, skipna=skipna, level=level, numeric_only=numeric_only, min_count=min_count)
        return res

    def __product__(self, **kwargs):
        axis = None
        skipna = True
        level = None
        numeric_only = None
        min_count = 0
        if 'axis' in kwargs.keys(): axis = kwargs['axis']
        if 'skipna' in kwargs.keys(): skipna = kwargs['skipna']
        if 'level' in kwargs.keys(): level = kwargs['level']
        if 'numeric_only' in kwargs.keys(): numeric_only = kwargs['numeric_only']
        if 'min_count' in kwargs.keys(): min_count = kwargs['min_count']
        res = self.product(axis=axis, skipna=skipna, level=level, numeric_only=numeric_only, min_count=min_count)
        return res

    def __quantile__(self, **kwargs):
        q = 0.5
        axis = 0
        numeric_only = True
        interpolation = 'linear'
        if 'q' in kwargs.keys(): q = kwargs['q']
        if 'axis' in kwargs.keys(): axis = kwargs['axis']
        if 'numeric_only' in kwargs.keys(): numeric_only = kwargs['numeric_only']
        if 'interpolation' in kwargs.keys(): interpolation = kwargs['interpolation']
        res = self.quantile(q=q, axis=axis, numeric_only=numeric_only, interpolation=interpolation)
        return res

    def __rank__(self, **kwargs):
        axis = 0
        method = 'average'
        numeric_only = NoDefault.no_default
        na_option = 'keep'
        ascending = True
        pct = False
        if 'axis' in kwargs.keys(): axis = kwargs['axis']
        if 'method' in kwargs.keys(): method = kwargs['method']
        if 'numeric_only' in kwargs.keys(): numeric_only = kwargs['numeric_only']
        if 'na_option' in kwargs.keys(): na_option = kwargs['na_option']
        if 'ascending' in kwargs.keys(): ascending = kwargs['ascending']
        if 'pct' in kwargs.keys(): pct = kwargs['pct']
        res = self.rank(axis=axis, method=method, numeric_only=numeric_only, na_option=na_option, ascending=ascending, pct=pct)
        return res

    def __round__(self, **kwargs):
        decimals = 0
        if 'decimals' in kwargs.keys(): decimals = kwargs['decimals']
        res = self.round(decimals=decimals)
        return res

    def __sem__(self, **kwargs):
        axis = None
        skipna = True
        level = None
        ddof = 1
        numeric_only = None
        if 'axis' in kwargs.keys(): axis = kwargs['axis']
        if 'skipna' in kwargs.keys(): skipna = kwargs['skipna']
        if 'level' in kwargs.keys(): level = kwargs['level']
        if 'ddof' in kwargs.keys(): ddof = kwargs['ddof']
        if 'numeric_only' in kwargs.keys(): numeric_only = kwargs['numeric_only']
        res = self.sem(axis=axis, skipna=skipna, level=level, ddof=ddof, numeric_only=numeric_only)
        return res

    def __skew__(self, **kwargs):
        axis = NoDefault.no_default
        skipna = True
        level = None
        numeric_only = None
        if 'axis' in kwargs.keys(): axis = kwargs['axis']
        if 'skipna' in kwargs.keys(): skipna = kwargs['skipna']
        if 'level' in kwargs.keys(): level = kwargs['level']
        if 'numeric_only' in kwargs.keys(): numeric_only = kwargs['numeric_only']
        res = self.skew(axis=axis, skipna=skipna, level=level, numeric_only=numeric_only)
        return res

    def __sum__(self, **kwargs):
        axis = None
        skipna = True
        level = None
        numeric_only = None
        min_count = 0
        if 'axis' in kwargs.keys(): axis = kwargs['axis']
        if 'skipna' in kwargs.keys(): skipna = kwargs['skipna']
        if 'level' in kwargs.keys(): level = kwargs['level']
        if 'numeric_only' in kwargs.keys(): numeric_only = kwargs['numeric_only']
        if 'min_count' in kwargs.keys(): min_count = kwargs['min_count']
        res = self.sum(axis=axis, skipna=skipna, level=level, numeric_only=numeric_only, min_count=min_count)
        return res

    def __std__(self, **kwargs):
        axis = None
        skipna = True
        level = None
        ddof = 1
        numeric_only = None
        if 'axis' in kwargs.keys(): axis = kwargs['axis']
        if 'skipna' in kwargs.keys(): skipna = kwargs['skipna']
        if 'level' in kwargs.keys(): level = kwargs['level']
        if 'ddof' in kwargs.keys(): ddof = kwargs['ddof']
        if 'numeric_only' in kwargs.keys(): numeric_only = kwargs['numeric_only']
        res = self.std(axis=axis, skipna=skipna, level=level, ddof=ddof, numeric_only=numeric_only)
        return res

    def __var__(self, **kwargs):
        axis = None
        skipna = True
        level = None
        ddof = 1
        numeric_only = None
        if 'axis' in kwargs.keys(): axis = kwargs['axis']
        if 'skipna' in kwargs.keys(): skipna = kwargs['skipna']
        if 'level' in kwargs.keys(): level = kwargs['level']
        if 'ddof' in kwargs.keys(): ddof = kwargs['ddof']
        if 'numeric_only' in kwargs.keys(): numeric_only = kwargs['numeric_only']
        res = self.var(axis=axis, skipna=skipna, level=level, ddof=ddof, numeric_only=numeric_only)
        return res

    def __nunique__(self, **kwargs):
        axis = 0
        dropna = True
        if 'axis' in kwargs.keys(): axis = kwargs['axis']
        if 'dropna' in kwargs.keys(): dropna = kwargs['dropna']
        res = self.nunique(axis=axis, dropna=dropna)
        return res

    def __value_counts__(self, **kwargs):
        subset = None
        normalize = False
        sort = True
        ascending = False
        dropna = True
        if 'subset' in kwargs.keys(): subset = kwargs['subset']
        if 'normalize' in kwargs.keys(): normalize = kwargs['normalize']
        if 'sort' in kwargs.keys(): sort = kwargs['sort']
        if 'ascending' in kwargs.keys(): ascending = kwargs['ascending']
        if 'dropna' in kwargs.keys(): dropna = kwargs['dropna']
        res = self.value_counts(subset=subset, normalize=normalize, sort=sort, ascending=ascending, dropna=dropna)
        return res